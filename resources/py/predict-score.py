#!/usr/bin/python3

import sys
import json
import pickle
import numpy
import pandas

try:
    input = numpy.array([sys.argv[1:5]])
    columns = ['TEAM_ID_home', 'TEAM_ID_away', 'HOME_TEAM_WINS', 'PTS_away']

    oneX = pandas.DataFrame(input, columns=columns)

    linearRegression = pickle.loads(b'\x80\x03csklearn.linear_model._base\nLinearRegression\nq\x00)\x81q\x01}q\x02(X\r\x00\x00\x00fit_interceptq\x03\x88X\t\x00\x00\x00normalizeq\x04X\n\x00\x00\x00deprecatedq\x05X\x06\x00\x00\x00copy_Xq\x06\x88X\x06\x00\x00\x00n_jobsq\x07NX\x08\x00\x00\x00positiveq\x08\x89X\x11\x00\x00\x00feature_names_in_q\tcnumpy.core.multiarray\n_reconstruct\nq\ncnumpy\nndarray\nq\x0bK\x00\x85q\x0cC\x01bq\r\x87q\x0eRq\x0f(K\x01K\x04\x85q\x10cnumpy\ndtype\nq\x11X\x02\x00\x00\x00O8q\x12\x89\x88\x87q\x13Rq\x14(K\x03X\x01\x00\x00\x00|q\x15NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK?tq\x16b\x89]q\x17(X\x0c\x00\x00\x00TEAM_ID_homeq\x18X\x0c\x00\x00\x00TEAM_ID_awayq\x19X\x0e\x00\x00\x00HOME_TEAM_WINSq\x1aX\x08\x00\x00\x00PTS_awayq\x1betq\x1cbX\x0e\x00\x00\x00n_features_in_q\x1dK\x04X\x05\x00\x00\x00coef_q\x1eh\nh\x0bK\x00\x85q\x1fh\r\x87q Rq!(K\x01K\x01K\x04\x86q"h\x11X\x02\x00\x00\x00f8q#\x89\x88\x87q$Rq%(K\x03X\x01\x00\x00\x00<q&NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\'b\x89C \r-V\xe2+\x16b?\x00\xe6\x80\x08\xd0\x9ct?[\xb1Qh\xd303@\xf8\x0fq\xbd\x1c\xe9\xe8?q(tq)bX\t\x00\x00\x00_residuesq*h\nh\x0bK\x00\x85q+h\r\x87q,Rq-(K\x01K\x01\x85q.h%\x89C\x08\x10{\x03\xda<\x1d\x1cAq/tq0bX\x05\x00\x00\x00rank_q1K\x04X\t\x00\x00\x00singular_q2h\nh\x0bK\x00\x85q3h\r\x87q4Rq5(K\x01K\x04\x85q6h%\x89C \x04\xe1\xa5\xfff\xb9\x92@[\xd2\xbd{\xae?\x89@g\x8f\xbb\xb3\x97_\x88@\x02G<\x12\xbbYD@q7tq8bX\n\x00\x00\x00intercept_q9h\nh\x0bK\x00\x85q:h\r\x87q;Rq<(K\x01K\x01\x85q=h%\x89C\x08G\xc2<\xcb\xea=f\xc1q>tq?bX\x10\x00\x00\x00_sklearn_versionq@X\x05\x00\x00\x001.0.2qAub.')
    prediction = linearRegression.predict(oneX)

    result = {'home_score': round(prediction[0][0])}
except IndexError:
    result = {'errors': ['Not enough arguments passed to the script.']}
except:
    result = {'errors': ['An exception occurred while executing script.']}

print(json.dumps(result))





